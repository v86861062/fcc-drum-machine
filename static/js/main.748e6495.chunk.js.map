{"version":3,"sources":["SoundButton.js","Switch.js","TextDisplay.js","App.js","serviceWorker.js","index.js"],"names":["SoundButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","e","power","keyASCII","keyLetter","charCodeAt","keyCode","playAudio","sound","current","currentTime","volume","play","onKeyPress","id","React","createRef","document","addEventListener","removeEventListener","react_default","a","createElement","className","onClick","ref","src","soundSrc","Component","Switch","name","type","checked","switchOn","readOnly","TextDisplay","text","App","handlePowerPress","setState","prevState","setDisplayText","state","handleBankPress","bank","handleVolumeChange","v","Number","target","value","Math","round","str","timer","clearTimeout","setTimeout","_this2","buttons","bankOne","bankTwo","map","index","src_SoundButton","key","url","src_Switch","src_TextDisplay","min","max","step","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.748e6495.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n//import Sound from 'react-sound'\r\n\r\nclass SoundButton extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.sound = React.createRef()\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    if (!this.props.power) {\r\n      return\r\n    }\r\n\r\n    let keyASCII = this.props.keyLetter.charCodeAt(0)\r\n    if (e.keyCode === keyASCII) {\r\n      this.playAudio()\r\n    }\r\n  }\r\n\r\n  playAudio = () => {\r\n    this.sound.current.currentTime = 0\r\n    this.sound.current.volume = this.props.volume\r\n    this.sound.current.play()\r\n    this.props.onKeyPress(this.props.id)\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress)\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad\" id={this.props.id} onClick={this.playAudio}>        \r\n        <audio id={this.props.keyLetter} className=\"clip\"\r\n          ref={this.sound} src={this.props.soundSrc}/>\r\n        <p>{this.props.keyLetter}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSoundButton.propTypes = {\r\n  power: PropTypes.bool.isRequired,\r\n  keyLetter: PropTypes.string.isRequired,\r\n  soundSrc: PropTypes.string.isRequired,\r\n  volume: PropTypes.number.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  onKeyPress: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SoundButton\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"./Switch.scss\"\r\n\r\nfunction Switch(props) {\r\n  return (\r\n    <label className=\"switch\">\r\n      <p>{props.name}</p>\r\n      <input\r\n        type=\"checkbox\"\r\n        onClick={props.onClick}\r\n        checked={props.switchOn}\r\n        readOnly\r\n      />\r\n      <span className=\"slider\" />\r\n    </label>\r\n  )\r\n}\r\n\r\nSwitch.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  switchOn: PropTypes.bool.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Switch\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nfunction TextDisplay(props) {\r\n  return <h1 id=\"display\">{props.text}</h1>\r\n}\r\n\r\nTextDisplay.propTypes = {\r\n  text: PropTypes.string.isRequired\r\n}\r\n\r\nexport default TextDisplay\r\n","import React, { Component } from \"react\"\nimport \"./App.scss\"\nimport SoundButton from \"./SoundButton.js\"\nimport Switch from \"./Switch.js\"\nimport TextDisplay from \"./TextDisplay\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      power: true,\n      bank: true,\n      text: \"\",\n      volume: 0.5\n    }\n    this.timer = null\n  }\n\n  handlePowerPress = () => {\n    this.setState(prevState => ({ power: !prevState.power }))\n    this.setDisplayText(this.state.power ? \"Power: OFF\" : \"Power: ON\")\n  }\n\n  handleBankPress = () => {\n    this.setState(prevState => ({ bank: !prevState.bank }))\n    this.setDisplayText(this.state.bank ? \"Smooth Piano Kit\" : \"Heater Kit\")\n  }\n\n  handleVolumeChange = e => {\n    let v = Number(e.target.value)\n    this.setState({ volume: v })\n    this.setDisplayText(\"Volume :\" + Math.round(v * 100))\n  }\n\n  setDisplayText = str => {\n    this.setState({ text: str })\n    if (this.timer) {\n      /* 這是為了防止新的文字被上次啟動的計時給清除 */\n      clearTimeout(this.timer)\n    }\n    this.timer = setTimeout(() => this.setState({ text: \"\" }), 1000)\n  }\n\n  render() {\n    let nowBank = this.state.bank ? bankOne : bankTwo\n\n    const buttons = nowBank.map(index => (\n      <SoundButton\n        key={index.keyLetter}\n        power={this.state.power}\n        keyLetter={index.keyLetter}\n        soundSrc={index.url}\n        volume={this.state.volume}\n        id={index.id}\n        onKeyPress={this.setDisplayText}\n      />\n    ))\n\n    return (\n      <div id=\"drum-machine\">\n        <div className=\"buttons-area\">{buttons}</div>\n\n        <div className=\"swtich-area\">\n          <Switch\n            name=\"Power\"\n            onClick={this.handlePowerPress}\n            switchOn={this.state.power}\n          />\n\n          <Switch\n            name=\"Bank\"\n            onClick={this.handleBankPress}\n            switchOn={this.state.bank}\n          />\n        </div>\n\n        <TextDisplay text={this.state.text} />\n\n        <div className=\"volume-area\">\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.01\"\n            value={this.state.volume}\n            onChange={this.handleVolumeChange}\n          />\n          <p>volume</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst bankOne = [\n  {\n    keyLetter: \"Q\",\n    id: \"Heater-1\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyLetter: \"W\",\n    id: \"Heater-2\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyLetter: \"E\",\n    id: \"Heater-3\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyLetter: \"A\",\n    id: \"Heater-4\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyLetter: \"S\",\n    id: \"Clap\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyLetter: \"D\",\n    id: \"Open-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyLetter: \"Z\",\n    id: \"Kick-n'-Hat\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyLetter: \"X\",\n    id: \"Kick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyLetter: \"C\",\n    id: \"Closed-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n]\n\nconst bankTwo = [\n  {\n    keyLetter: \"Q\",\n    id: \"Chord-1\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"\n  },\n  {\n    keyLetter: \"W\",\n    id: \"Chord-2\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"\n  },\n  {\n    keyLetter: \"E\",\n    id: \"Chord-3\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"\n  },\n  {\n    keyLetter: \"A\",\n    id: \"Shaker\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"\n  },\n  {\n    keyLetter: \"S\",\n    id: \"Open-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\"\n  },\n  {\n    keyLetter: \"D\",\n    id: \"Closed-HH\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\"\n  },\n  {\n    keyLetter: \"Z\",\n    id: \"Punchy-Kick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\n  },\n  {\n    keyLetter: \"X\",\n    id: \"Side-Stick\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"\n  },\n  {\n    keyLetter: \"C\",\n    id: \"Snare\",\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"\n  }\n]\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}